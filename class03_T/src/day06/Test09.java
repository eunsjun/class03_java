package day06;

import java.util.Arrays;

public class Test09 {
/*
 배열
 	==> 같은 형태의 데이터를 여러개 모아서 한꺼번에 관리하는 방식
 		데이터가 많은 경우 원칙적으로 데이터의 갯수만큼 변수를 만들어야 한다.
 		이러다보니 변수를 만들때도 불편하고
 		사용할 때도 불편하다.
 		이런 불편함을 해결하기 위한 방법으로 제시된 것이 배열이다.
 		즉
 			하나의 변수를 사용해서 여러개의 데이터를 관리할 수 있도록 한 것.
 			
 	참고]
 		자바의 변수의 형태의 종류
 			1. 기본형 ==> 스텍에 만들어지는 경우
 				기본 데이터 타입 ==> 변수에 기억된 주소가 데이터의 주소인 경우
 				기본데이터타입 8가지
 			2. 참조형 ==> 힙(heap)에 만들어지는 경우
 				변수안에 기억된 주소에 기억된 내용이 주소인 경우...
 				new 로 만들어지는 모든 것...
 				
 		***
 		메모리에 저장된 데이터는 반드시 저장된 주소를 알아야 사용할 수 있다.
 		그 주소를 기억하는 역할을 하는 것이 변수이다.
========================================================================================================

 배열 만드는 방법
 	1. 	new 	데이터타입[데이터갯수];
 		==> new 명령을 사용했다는 것은 객체 하나를 만든다는 것이고 
 			이것은 heap 영역에 만들어진다는 말이다.
 			
 		예]
 			new int[10];
 				==> 정수 int 타입의 데이터 10개를 기억할 공간을 만들어 주세요.
 				
 		
 		참고]
 			new 명령
 				==> 1. heap 에 뭔가를 만드세요.
 					2. 만들어진 시작 주소를 알려준다.
 					
 	
 	2. Heap 에 있는 메모리의 주소를 기억할 변수를 만들어야 한다.
 		명령어 	]
 			데이터타입[] 	변수이름;
 			
 			예]
 				int[] num;
 				
 					데이터타입[] 	:  자신이 관리할 Heap 영역에 있는 실제 데이터 형태에 따라 달라진다.
 										이때 실제 데이터 형태를 Heap Type
 										
 				결론]
 					heap type 이 같은 주소만 기억한다.
 					
 					
 				예]
 					int[] num = new float[5];	==> 안된다. 왜?? 힙타입이 다르니까....
 					
 					int[] num = new int[5];		==> 된다. 힙타입이 같으니까... 써도 된다.
 					
 					
 배열 사용 방법]
 	
 	변수[인덱스];  ==> 인덱스는 0부터 시작
 	
참고]
	배열주소.length ==> 배열주소가 관리하는 곳에 있는 메모리의 갯수를 알려준다.
						배열의 길이를 알려준다.
						

	배열 초기화
		==> 배열은 Heap 에 만들어진다. 
		 	heap 에 만들어지는 것들은 자동 초기화가 이루어진다.
		 		
		 		초기화 기본값
		 			정수 : 0
		 			실수 : 0.0
		 			논리 : false
		 			문자 : 0
		 			
		 경우에 따라서는 배열 메모리에 강제로 특정값을 입력해될 때도 있다.
		 ==> 이때 배열초기화 라 한다.
		 	
		 	형식1] 
		 		int[] num = {1, 2, 3, 4, 5};
		 	
		 	형식2]
		 		int[] num = new int[]{1, 2, 3, 4, 5};
		 		
		 	주의 ] ***
		 		배열초기화를 할 경우는 배열의 갯수를 입력하지 못한다.
		 		대신 배열초기화의 데이터의 갯수에 따라서 배열의 길이가 정해진다.
		 		
	*****
	배열은 만들 때 크기가 정해져야되고
	한번 만든 크기는 변경이 불가능 하다.
	
참고]
	배열안의 데이터를 확인하는 함수
		==> Arrays.toString()
			: 원칙적으로 배열은 내용을 검색할 때 
			  반복문을 사용해서 인덱스의 데이터를 검색 해야 한다.
			  배열이 가진 모든 데이터를 문자열로 변환해서 출력해주는 함수로
			  간단히 내용을 확인할 용도로 사용할 수 있다.
			  

 		
 */
	
	public static void main(String[] args) {
		int[] num = new int[]{ 1, 2, 3, 4, 5};
		
		System.out.println("num 의 길이 : " + num.length);
		
		// 배열의 인덱스 위치의 데이터를 출력하자.
		for(int i = 0 ; i < num.length ; i++ ) {
			System.out.printf("%2d : %2d |", i, num[i]);
		}
		System.out.println();
		System.out.println("num  의 세번째 데이터 : " + num[2]);
		
		// toString() 함수로 배열 내용을 살펴보자.
		System.out.println("num 의 데이터 : " + Arrays.toString(num));
		
		num[2] = 10;
		System.out.println("num 의 데이터 : " + Arrays.toString(num));
		
		
	}

}
