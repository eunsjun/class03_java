package day13;

public class Test04 {
/*
	Interface( 인터페이스 )
		==> 클래스이 한 종류이긴 하지만
			형태나 의미가 지금까지 다뤘던 클래스와는 
			다른 특수한 클래스의 일종
			
		1. 최상위 클래스가 Object 가 아니다.
			==> 즉, 인터페이스는 다른 클래스를 상속 받아서 만들어진 클래스가 아니다.
			
		2. 내부에는 100% 추상함수가 존재해야한다.
			==> 일반함수는 존재하지 않는다.
				기능을 가진 함수는 존재하면 안된다.
				
		3. 인터페이스는 다른 클래스에 상속할 수 있는데
			다중상속이 가능하다.
		
		*
		4. 변수는 가질 수 있다.
			변수는 자동적으로 선언해주지 않아도 
				public static final 
			변수가 된다.
			
		5. 인터페이스 소속 함수는 묵시적으로 
				public 
			함수가 된다.
			
		
	만드는 방법]
		[접근지정자]  inteface 인터페이스이름 {
			변수;		==> public static final
			추상함수;	
		}
		
		
	인터페이스 존재이유???
		==> 가끔은 JVM에 의해서 자동 호출되어야 하는 함수가 필요하다.
			그러므로 함수의 존재는 필요하다.
			
			하지만 이 함수가 해야할 일은 개발자가 작성해야 되는 경우가 있다.
			
			
			참고]
				자바에서 이벤트 처리 순서
					1. 사용자가 버튼을 클릭하면 이벤트가 발생한다.
						이 이벤트는 운영체제가 감지한다.
						
					2. 운영체제는 감지한 이벤트를 
						이벤트가 발생한 프로그램을 구분하여 
						그프로그램을 담당하는 플랫폼(JVM)에 통보를 한다.
						
					3. 	JVM은 통보받은 이벤트의 정보를 분석하여
						그정보에 합당한 함수를 호출해서 이벤트를 처리한다.
						==> 이때 그 정보에 맞는 함수를 호출하는데 중요한 의미가 있다.
							결국 함수가 존재해야 한다는 이야기...
							
						==> 이벤트가 발생했을때 처리를 JVM 이 하는 것이 아니고
							개발자가 작성한 함수에서 처리를 한다.
							
							
			인터페이스 사용방법]
				1.	==> 90% 사용하는 방법
					a. 인터페이스는 스스로 new 되지 못한다.
						이유는 아직 기능이 정해지지 않은 추상함수가 있기 때문이다.
						따라서 클래스에게 상속해준후 사용한다.
						
						상속방법]
							class 클래스이름 implements 인터페이스이름{
							
							}
							
						인터페이스는 상속을 해줄때 "구현" 이라고 표현한다.
						
					b.  상속 받은 클래스에서는 인터페이스에 있는 모든 함수를 100% 오버라이드 해야 한다.
						이때 필요한 기능을 개발자가 부여한다.
						==> 인터페이스 소속함수는 접근지정자가 public 이다.
						
					c. 	일반 클래스를 new 시켜서 사용한다.
						
				2. 
					약 10% 정도로 사용하는 방법
						속성이 static 이면서
						반환값이 인터페이스인 함수를 사용해서
					인스턴스를 만들면 된다.
					
					==> 인터페이스 내부에는 기능이 구현된 함수는 존재하지 않으므로
						다른 클래스의 함수에서 찾아야 한다.
						
						
		참고]
			***
			상속은 단일 상속만 가능하지만
			구현은 다중상속도 가능하다.
			
			형식]
				class 클래스이름 implements  인터페이스1, 인터페이스2, 인터페이스3,...{
					각 인터페이스의 추상함수를 모두 구현해줘야 한다.
				}
				
			**
			상속과 동시에 구현도 가능하다.
			형식]
				class  클래스이름 extends 상속받을클래스 implements 인터페이스1, 인터페이스2, ...{
					인터페이스의 추상함수 모두 구현....
				}
				
				주의]
					extends 가 먼저 와야하고 
					implements 가 나중에 와야 한다.
					
					
	==================================================================================================
	여기서부터는 참고삼아 알아두세요...
	
		인터페이스도 다른 인터페이스를 상속받을 수 있다.
		
			형식]
				interface 인터페이스이름 extends 인터페이스 {}
				
				
				
		참고]
			인터페이스 안에도 일반함수도 올수 있는데
			이때는 반드시
			함수의 속성을 default 라고 명시해야 한다.
			
			형식]
				default 반환값 함수이름(){}
				
		
 */
	public Test04() {
	}

}
