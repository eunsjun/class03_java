package day10;

import java.util.*;
public class Test04 {
/*
		생성자 함수( Construct )
			==> 클래스를 사용하기 위해 new 시키는 순간 자동 실행되는 함수...
				엄밀히 말해 자동은 아니고
				인스턴스가 만들어지는 순간(new 명령이 실행되는 순간)
				인스턴스에 필요한 작업들이 선행 되어야 할 경우 
				필요한 코드들이 들어가는 함수..
				변수 초기화 가 대표적...
			
			클래스는 한가지 목적을 달성하기 위해서 만들어진 프로그램 단위이다.
			이 안에 그 목적을 달성하기 위해서
			변수나 함수를 만들어 두는데...
			기본적으로 선행되어야할 조치가 필요한 경우도 있다.
			그 선행되어야 할 것들을 처리하는 함수이다.
			
			생성자 함수를 만드는 이유 :
				클래스의 목적에 따라서 
				그 클래스가 해야 할 가장 기본적인 일을 처리하기 위해 만드는 것...
		
		생성자 함수 만드는 방법]
			규칙]
				1. 함수의 이름은 클래스 이름과 동일하게 만든다.(대소문자까지...)
				2. 반환값은 절대로 가지면 안되고 void 라고 써도 안된다.
				3. 매개변수는 가질 수 있다.
				
			***
			참고]
				생성자 함수는 만들지 않으면 자바 가상 머신이 자동으로 기본 생성자 함수를 만들어준다.
				여기서 만들어지는 기본 생성자 함수는 매개변수가 없고 함수의 내용도 없는 생성자 함수이다.
				
				만일 하나라도 생성자 함수를 만들게 되면 자바 가상머신은 기본 생성자 함수를 만들지 않는다.
				
				예]
					class Test {
					
					}
					==> new Test(); ==> o  : 자바 가상 먼신이 자동으로 생성자 함수를 만들어주는 경우
					
					class Test {
						public Test(String str){
						}
					}
						==> new Test(); ==> X : 이 경우는 자바 가상머신이 기본 생성자 함수를 만들어 주지 않는다.
						==> new Test(""); ==> o
			
			생성자 함수도 오버로딩 할 수 있다.
			==> 함수 호출 형태에 따라서 다양하게 생성자 함수를 만들어 줄 수 있다.
			
		생성자 함수 이용방법]
			생성자 함수는 인스턴스를 만들때 기본 셋팅을 어떻게 할 것인지 셋팅해주는 함수이다.
			생성자 함수가 요구하는 매개변수가 무엇이지를 보면 그 클래스의 인스턴스를 만들어주는 방법이 나온다.
			
		참고]
			
			*****
			this()	: 현재 생성자를 실행하는 도중 다른 생성자를 강제로 호출하는 유일한 방법...
			
				규치]
					1. 반드시 생성자 함수 안에서만 사용할 수 있다.
						일반함수 안에서는 사용할 수 없다.
					2. 반드시 생성자 함수의 첫 문장으로 사용해야 한다.
						this() 이전에 다른 문장이 먼저 오면 에러가 발생한다.
						
			참고]
				this	: 현재 실행중인 객체 자신을 나타내는 예약어....
		
 */
	
	Scanner sc;
	public Test04() {
		// System.out.println("Test04 클래스의 인스턴스가 생성되었습니다.");
		sc = new Scanner(System.in);
	}
	
	// 생성자 함수 오버로딩
	public Test04(String str) {
		this();
	}
	
	public Test04(int no) {
		this();
	}

	public static void main(String[] args) {
		new Test04();
	}

}
