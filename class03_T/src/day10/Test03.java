package day10;

public class Test03 {
/*
		*****
		함수의 오버로딩( Overloading : 함수의 중첩 )
			==> 원칙적으로 클래스내에서 만들어지는 함수의 이름은 모두 달라야 한다.
				같은 이름의 함수를 만든다면 에러가 발생한다.
				
				이러다보니 가독성에서 문제가 발생한다.
				즉, 함수의 가독성이란
				함수이름만 봐도 그 함수의 기능을 어느정도 유추가 가능해야 한다.
				만약 함수 이름을 모두 다르게 만든다면
				가독성에서 문제가 발생할 수 있다.
				예를 들자면 areaFloatInt(float a, int b) 인 경우 함수이름이 길어지고 읽기가 불편하다.
				
				이런문제를 해결하기 위해서 도입된 문법이 있는데
				이 문법을 함수의 오버로딩이라 한다.
				
				오버로딩이란???
				같은 클래스안에 같은 이름의 함수를 만들 수 있다.
				단, 다음 조건은 반드시 지켜야 한다.
				
				*****
				함수의 이름은 같게하고...
				함수의 매개변수의 개수, 순서, 형태중 하나이상이 달라야 한다.
				참고]	반환값과는 전혀 무관하다.
				
				예]
					void abc(){}
					
					void abc(int a){}	==> o
					int abc(){}			==> x : 반환값과는 무관하므로 안된다.
					
					void xyz(int a){}
					void xyz(float a){}			==> o
					void xyz(int a, int b)		==> o
					void xyz(int a, float b)	==> o
					void xyz(int b, int a)		==> x
					
		사용법]
			==> 다름 사람들이 만든 클래스에도 오버로딩이 구현된 함수를 볼 수 있다.
				이들 함수를 사용하는 방법
				원하는 기능을 하는 함수가 요구하는 데이터를 
				형태와 순서대로 입력해서 함수를 실행한다.
				
				참고]
					데이터 타입이 맞지 않는데 실행되는 경우가 간혹있지만
					이경우는 자동 형변환이 이루어 지는 경우다.
					
					예]
						void abc(float a){}
						
						abc(10);	==> 실행된다. 자동 형변환이 이루어 졌다.
					
				
				
				
 */

	public Test03() {
	}

	public static void main(String[] args) {
		new Test03();
	}
	
	public void abc() {}
//	public int abc() {}
	
}
